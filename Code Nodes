
javascript// Code Node - ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MQTT ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà AI ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à
try {
  const input = $input.first().json;
  const rawValue = input.message || input.payload || input.value || 0;
  const topic = input.topic || 'data/qwCOowlTnOYNSLVmZVMW/1';
  const timestamp = new Date().toLocaleString('th-TH');
  
  console.log('üì° Raw value from MQTT:', rawValue);
  
  // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  let value = 0;
  if (rawValue !== null && rawValue !== undefined && rawValue !== '') {
    const parsedValue = parseFloat(rawValue);
    if (!isNaN(parsedValue)) {
      value = parsedValue;
    }
  }
  
  // ‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó sensor
  const topicParts = topic.split('/');
  const deviceKey = topicParts[1] || 'qwCOowlTnOYNSLVmZVMW';
  let slot = topicParts[2] || '1';
  
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó sensor
  let sensorName, sensorType, unit, icon, assessment;
  
  switch(slot) {
    case '1':
      sensorName = '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥';
      sensorType = 'temperature';
      unit = '¬∞C';
      icon = 'üå°Ô∏è';
      if (value < 16) assessment = '‡πÄ‡∏¢‡πá‡∏ô‡∏°‡∏≤‡∏Å';
      else if (value < 20) assessment = '‡πÄ‡∏¢‡πá‡∏ô';
      else if (value < 25) assessment = '‡∏™‡∏ö‡∏≤‡∏¢';
      else if (value < 30) assessment = '‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô';
      else if (value < 35) assessment = '‡∏£‡πâ‡∏≠‡∏ô';
      else assessment = '‡∏£‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å';
      break;
      
    case '2':
      sensorName = '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô';
      sensorType = 'humidity';
      unit = '%';
      icon = 'üíß';
      if (value < 30) assessment = '‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å';
      else if (value < 40) assessment = '‡πÅ‡∏´‡πâ‡∏á';
      else if (value < 60) assessment = '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°';
      else if (value < 80) assessment = '‡∏ä‡∏∑‡πâ‡∏ô';
      else assessment = '‡∏ä‡∏∑‡πâ‡∏ô‡∏°‡∏≤‡∏Å';
      break;
      
    default:
      sensorName = 'Unknown';
      sensorType = 'unknown';
      unit = '';
      icon = 'üìä';
      assessment = '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
  }
  
  console.log(`${icon} ${sensorName}: ${value}${unit} (${assessment})`);
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI
  const message = `${icon} ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•${sensorName}‡πÉ‡∏´‡∏°‡πà!

üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:
- ${sensorName}: ${value}${unit}
- ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô: ${assessment}
- ‡πÄ‡∏ß‡∏•‡∏≤: ${timestamp}
- ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ${deviceKey}

‡πÇ‡∏õ‡∏£‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•${sensorName} ${value}${unit} ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô:
1. ‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£ (‡∏õ‡∏Å‡∏ï‡∏¥/‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥)
2. ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà  
3. ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á
4. ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö`;

  return [{
    json: {
      message: message,
      sensor_data: {
        name: sensorName,
        type: sensorType,
        value: value,
        unit: unit,
        icon: icon,
        slot: slot,
        assessment: assessment,
        timestamp: timestamp,
        topic: topic,
        device_key: deviceKey
      }
    }
  }];
  
} catch (error) {
  console.log('‚ùå Error:', error.message);
  return [{
    json: {
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      sensor_data: {
        name: "Error",
        value: 0,
        unit: "",
        icon: "‚ùå"
      }
    }
  }];
}
